08048934 <main>:
1.) EPILOG
 8048934:       55                      push   ebp								;epilog
 8048935:       89 e5                   mov    ebp,esp							;epilog
 8048937:       83 e4 f0                and    esp,0xfffffff0					;clearing the last bit of $esp
 804893a:       81 ec 90 00 00 00       sub    esp,0x90							;setup a 144 byte stack frame
 8048940:       eb 01                   jmp    8048943 <main+0xf>				;jmp to 8048943
 8048942:       90                      nop										;no op, skipped over by above jmp
2.) PRINTF
 8048943:       8b 0d f8 b5 04 08       mov    ecx,DWORD PTR ds:0x804b5f8		;hard coded string addr
 8048949:       8b 15 f4 b5 04 08       mov    edx,DWORD PTR ds:0x804b5f4		;hard coded string addr
 804894f:       b8 70 ad 04 08          mov    eax,0x804ad70					;some sort of address?
 8048954:       89 4c 24 08             mov    DWORD PTR [esp+0x8],ecx			;arg setup for printf
 8048958:       89 54 24 04             mov    DWORD PTR [esp+0x4],edx			;arg setup for printf
 804895c:       89 04 24                mov    DWORD PTR [esp],eax				;arg setup for printf
 804895f:       e8 b8 fe ff ff          call   804881c <printf@plt>				;call to printf
 
 8048964:       a1 64 b1 04 08          mov    eax,ds:0x804b164					;setup for fgets
 8048969:       89 44 24 08             mov    DWORD PTR [esp+0x8],eax			;setup for fgets
 804896d:       c7 44 24 04 80 00 00    mov    DWORD PTR [esp+0x4],0x80			;setup for fgets
 8048974:       00 																
 8048975:       8d 44 24 10             lea    eax,[esp+0x10]					;setup for fgets
 8048979:       89 04 24                mov    DWORD PTR [esp],eax				;setup for fgets
 804897c:       e8 2b fe ff ff          call   80487ac <fgets@plt>				;call fgets
 3.) WEIRD TEST
 8048981:       85 c0                   test   eax,eax							;Test = AND with flags being set, namely zf
 8048983:       75 02                   jne    8048987 <main+0x53>				;If they are not equal, jump to 8048987
 8048985:       c9                      leave  									;epilog
 8048986:       c3                      ret    									;epilog
4.) STRNCMP
 8048987:       c7 44 24 08 05 00 00    mov    DWORD PTR [esp+0x8],0x5			;setup for strncmp
 804898e:       00 																
 804898f:       c7 44 24 04 8d ad 04    mov    DWORD PTR [esp+0x4],0x804ad8d	;setup for strncmp
 8048996:       08 													
 8048997:       8d 44 24 10             lea    eax,[esp+0x10]					;setup for strncmp
 804899b:       89 04 24                mov    DWORD PTR [esp],eax				;setup for strncmp
 804899e:       e8 a9 fe ff ff          call   804884c <strncmp@plt>			;call strncmp
5.) ANOTHER WEIRD JUMP
 80489a3:       85 c0                   test   eax,eax							;test eax against itself
 80489a5:       75 5a                   jne    8048a01 <main+0xcd>				;jump not equal to 8048a01
6.) MALLOC
 80489a7:       c7 04 24 04 00 00 00    mov    DWORD PTR [esp],0x4				;if we fell through jump, set aside four bytes on heap
 80489ae:       e8 b7 07 00 00          call   804916a <malloc>					;call to malloc
7.) MEMSET
 80489b3:       a3 f4 b5 04 08          mov    ds:0x804b5f4,eax					;store heap addr at 804b5f4
 80489b8:       a1 f4 b5 04 08          mov    eax,ds:0x804b5f4					;move that value back into eax
 80489bd:       c7 44 24 08 04 00 00    mov    DWORD PTR [esp+0x8],0x4			;setup for memset
 80489c4:       00 
 80489c5:       c7 44 24 04 00 00 00    mov    DWORD PTR [esp+0x4],0x0			;setup for memset
 80489cc:       00 
 80489cd:       89 04 24                mov    DWORD PTR [esp],eax				;passing heap addr to memset
 80489d0:       e8 e7 fd ff ff          call   80487bc <memset@plt>				;call memset
8.) STRLEN
 80489d5:       8d 44 24 10             lea    eax,[esp+0x10]					;take 3rd argument off of stack and put in eax
 80489d9:       83 c0 05                add    eax,0x5							;add 5 to eax
 80489dc:       89 04 24                mov    DWORD PTR [esp],eax				;place eax at top of stack
 80489df:       e8 18 fe ff ff          call   80487fc <strlen@plt>				;call strlen
9.) IF STRING LEN <= 30, STRCPY
 80489e4:       83 f8 1e                cmp    eax,0x1e							;cmp eax to 30byte
 80489e7:       77 18                   ja     8048a01 <main+0xcd>				;jump if above(unsigned) to 8048a01
 80489e9:       8d 44 24 10             lea    eax,[esp+0x10]					;load address of 3rd arg on stack into eax
 80489ed:       8d 50 05                lea    edx,[eax+0x5]					;load addr of value eax+5
 80489f0:       a1 f4 b5 04 08          mov    eax,ds:0x804b5f4					;load addr 804b5f4 into eax
 80489f5:       89 54 24 04             mov    DWORD PTR [esp+0x4],edx			;place edx as 2nd arg on stack
 80489f9:       89 04 24                mov    DWORD PTR [esp],eax				;place eax as 1st arg on stack
 80489fc:       e8 0b fe ff ff          call   804880c <strcpy@plt>				; <--------VULNERABLE!!!
10.)2ND STRNCMP
 8048a01:       c7 44 24 08 05 00 00    mov    DWORD PTR [esp+0x8],0x5			;setup 3rd arg on stack
 8048a08:       00 
 8048a09:       c7 44 24 04 93 ad 04    mov    DWORD PTR [esp+0x4],0x804ad93	;setup 2nd arg on stack
 8048a10:       08 
 8048a11:       8d 44 24 10             lea    eax,[esp+0x10]					;take 4th arg from stack and load it into eax
 8048a15:       89 04 24                mov    DWORD PTR [esp],eax				;setup 1st arg on stack
 8048a18:       e8 2f fe ff ff          call   804884c <strncmp@plt>			;call strncmp, takes 3 args (str1, str2, len)
12.) ANOTHER JMP
 8048a1d:       85 c0                   test   eax,eax
 8048a1f:       75 0d                   jne    8048a2e <main+0xfa>
13.)50% OFF
 8048a21:       a1 f4 b5 04 08          mov    eax,ds:0x804b5f4					;load addr of heap into eax
 8048a26:       89 04 24                mov    DWORD PTR [esp],eax				;place addr at top of stack
 8048a29:       e8 6e 0f 00 00          call   804999c <free>					;free the heap memory
14.)3RD STRNCMP
 8048a2e:       c7 44 24 08 06 00 00    mov    DWORD PTR [esp+0x8],0x6			;str size
 8048a35:       00 
 8048a36:       c7 44 24 04 99 ad 04    mov    DWORD PTR [esp+0x4],0x804ad99	;addr of 2nd string
 8048a3d:       08 
 8048a3e:       8d 44 24 10             lea    eax,[esp+0x10]					;addr of 1st str
 8048a42:       89 04 24                mov    DWORD PTR [esp],eax				;place 1st arg on stack
 8048a45:       e8 02 fe ff ff          call   804884c <strncmp@plt>			;call strncmp
15.)JMPIN AGAIN
 8048a4a:       85 c0                   test   eax,eax
 8048a4c:       75 14                   jne    8048a62 <main+0x12e>
16.)STRDUP
 8048a4e:       8d 44 24 10             lea    eax,[esp+0x10]					;take 3rd arg from stack
 8048a52:       83 c0 07                add    eax,0x7							;add 7 to eax
 8048a55:       89 04 24                mov    DWORD PTR [esp],eax				;place arg on stack (addr of str to dup)
 8048a58:       e8 0f fe ff ff          call   804886c <strdup@plt>				;call strdup
17.)CHECKING THE DUP?
 8048a5d:       a3 f8 b5 04 08          mov    ds:0x804b5f8,eax					;take eax(dup addr?) and place it in ds
 8048a62:       c7 44 24 08 05 00 00    mov    DWORD PTR [esp+0x8],0x5			;3rd arg on stack, size of 5
 8048a69:       00 
 8048a6a:       c7 44 24 04 a1 ad 04    mov    DWORD PTR [esp+0x4],0x804ada1	;place addr as 2nd arg on stack
 8048a71:       08 
 8048a72:       8d 44 24 10             lea    eax,[esp+0x10]					;load 3rd arg from stack into eax
 8048a76:       89 04 24                mov    DWORD PTR [esp],eax				;setup 1st arg on stack
 8048a79:       e8 ce fd ff ff          call   804884c <strncmp@plt>			;call strncmp (compare dup string to orginal?)
18.)
 8048a7e:       85 c0                   test   eax,eax
 8048a80:       0f 85 bc fe ff ff       jne    8048942 <main+0xe>
19.)
 8048a86:       a1 f4 b5 04 08          mov    eax,ds:0x804b5f4
 8048a8b:       8b 40 20                mov    eax,DWORD PTR [eax+0x20]
 8048a8e:       85 c0                   test   eax,eax
 8048a90:       74 11                   je     8048aa3 <main+0x16f>
20.)
 8048a92:       c7 04 24 a7 ad 04 08    mov    DWORD PTR [esp],0x804ada7
 8048a99:       e8 9e fd ff ff          call   804883c <puts@plt>
 8048a9e:       e9 a0 fe ff ff          jmp    8048943 <main+0xf>
21.)
 8048aa3:       c7 04 24 c3 ad 04 08    mov    DWORD PTR [esp],0x804adc3
 8048aaa:       e8 8d fd ff ff          call   804883c <puts@plt>
 8048aaf:       e9 8f fe ff ff          jmp    8048943 <main+0xf>
